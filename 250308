ec2에 mysql, postgre, maria 의 오픈소스를 직접 설치하여 운영할 수 있지만

db 인프라 구축 지식이 부족한 상황일때 사용하면 좋음

백업, 고가용성, 자동조정(오토스켈링) 을 쉽게 제공함

rds 의 데이터베이스 생성은
dbms (데이타베이스 인스턴스) 를 생성하는것

db서버기 때문에 cpu, mem, disk space 등을 설정하여야 함

오로라 (aws 에서 만든 mysql, postgre 호환되는 엔진)
무료안댐

--- 실습 ---
rds 의 데이타베이스 생성 버튼클릭

생성방식 - 표준생성 선택
엔진옵션 - 마리아 db 선택
엔진버전 - 원하는걸로(디폴트로함)
템플릿 - 프로덕션 ㄴㄴ
템플릿의 프로덕션 - 운영환경 사례 (프로덕션, 개발/테스트, 프리티어)

물론 템플릿 하단의 정보를 수정하면 상관없긴함(그냥 템플릿으로 이해하면됨)

rds의 특징인 백업, 오토스켈링은 지원되지만 고가용성이 비활성화됨 (프리티어에서만)

db 인스턴스 식별자 - db 인스턴스의 ID (식별자)
오늘 실습에선 wordpress 용도니까 "wp-db" 로 설정함

자격증명설정
마스터 사용자 이름 - root 사용자가아님
root 사용자라면 dbms를 파괴해버릴수 있기때문에 root권한은 아니지만 그에 준하게 권한을 준 계정 (거의다 있긴함, root 권한이 필요할땐 파라미터를 통하여)
실습에선 "hjTest" 로 만듬

자격증명관리
비밀번호 설정
aws secrets manager에서 관리는 password 를 주기적으로 자동으로 바꿔줌
조금더 안전함
여기서는 자체관리로 함

마스터암호 - 8자 이상
특문,대문,소문,숫자 ( pw 분실시 재설정 어렵진 않음, 단 시간이 좀 걸림, 찾기불가 )
나는 "!Bes어쩌구" 로함

인스턴스 구성
db.t4g.micro 설정 ( db = rds 의 유형, t4g = t타입의 4세대, micro = 인스턴스의 사이즈 )
근데 강사님은 db.t3.micro 로 선택하심

db.t3.micro spec = 2core 1G 의 인스턴스

스토리지
스토리지 유형 - 범용 ssd (gp2)
할당된 스토리지 - 20
추가 스토리지 구성 (안건듬)
스토리지 자동 조정 = 오토스켈링기능
이건 뭐냐면 rds 내부에서 정해진 임계값 ex) 90% 도달시 데이터가 꽉차는 문제를 방지하기 위하여 자동적으로 디스크의 사이즈가 커지는 기능

이 임계값에 도달하는지 체크하는 기능은 aws 의 cloudwatch 가 주기적으로 체크함

최대 스토리지 임계값
내가 설정하는걸로 어디까지 늘어날수 있는지
비용과 관련되기 때문에 max = 6T

추가된 스토리지는 다음 중 더 큰 값만큼 증가한다
10G, 현재 할당된 스토리지의 10%

가용성 및 내구성
다중 AZ 배포 = 대기 인스턴스 ( 다른 서버에 같은 데이터가 write 되기 때문에 고가용성 )
단, 여기서는 프리티어라서 비활성화

연결
컴퓨팅 리소스
일반적으로는 ec2와 다이렉트로 연결하여 보안성 향상시킴
ec2 컴퓨팅 리소스에 연결 안 함 클릭
ipv4클릭
vpc 선택은 my-vpc 선택

rds 에 pubip 를 주지않으면 내가 다이렉트로 (mongo compass 처럼) 접속이 힘들지만 설정한 ec2서버에서만 접속이 되기 때문에 보안적 측면 우수

db 서브넷 그룹 - 새 db 서브넷 그룹 생성
퍼블릭 액세스 - 위 이유로 아니요 선택
vpc 보안그룹은 새로생성 클릭
새 vpc 보안 그룹 이름 - my-sg-rds
(inbound , outbound 설정이 바로 안댐 추후 후속조치 필요)
가용역역 = 어떤 AZ 에 만들지 "2b" 선택

프록시 - 유료 선택안함
라우팅 기능으로 확장,복원,보안에 유리한 고가용성 프록시

데이터베이스 인증 - 암호 인증 (아까 만든 pw 인증)

모니터링 - 이건 나도 첨봄
향상된 모니터링 - 유료
로그 내보내기 - 무료 올체크

추가구성
데이터베이스 옵션
create DB 명령어로 만들수 있는데 initDB 를 만드는거

초기 데이터베이스 이름 - "wordpress"
db 파라미터 그룹 - 권한 등 크리티컬 이슈 권한 필요할때 설정 (안건듬)

백업 - 그냥 보이는 그대로

암호화 - 트래픽을 훔쳐보기 힘들게
kms키를 직접 만들어서 할수도 있음(암호화, 복호화)
근데 디폴트로 함

유지관리 - 마이너버전업뎃되면 버전 자동업그레이드
업뎃햇다가 클나면 안댄다면 비활성화 하도록

월별 추정 요금 - 그냥 설명

데이터베이스 생성버튼 클릭

--- 실습끝 ---

--- ec2 서버 3개 살리고 route53 호스팅영역 띄워서 ---

gabia ns 설정하고

blog 를 서브도메인으로 web01 연결

클라우드셸 열고

web01 에 ssh 연결 ssh -i *.pem ec2-user@펍아피

sudo dnf install -y mariadb105

[ec2-user@web01Srv ~]$ mysql -h wp-db.cfgg6kkuwxq7.ap-northeast-2.rds.amazonaws.com -u kpzzy -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 34
Server version: 11.4.4-MariaDB-log managed by https://aws.amazon.com/rds/

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]>

근데 이대로 따라하면 안댐

이때 생각할것
1. vpc 의 sg 설정을 잘했는지에 대하여

주의점1 - ec2의 sg가 아닙니다

주의점2 - vpc의 inbound 의 3306 포트의 source ip 가 web01과 다를것

show databases; (다까묵음 ㅋㅋ)
(mongoshell의 show dbs랑 같음)

CREATE USER 'wpuser'@'%' IDENTIFIED BY 'wppass';
CREATE DATABASE IF NOT EXISTS wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';
FLUSH PRIVILEGES;
quit

mysql 로그인 및 pw 를 wpuser && wppass 로 설정

wordpress 설치 커맨드

$ sudo dnf install -y httpd php php-mysqlnd php-gd
$ wget https://ko.wordpress.org/latest-ko_KR.zip
$ sudo unzip ~/latest-ko_KR.zip -d /var/www/html/
$ sudo chown -R apache:apache /var/www/html/wordpress
$ sudo systemctl restart httpd

chown 이거 촌이 아니라 change ownership 임 ㄷㄷ
-R은 하단 다적용의 R인듯

오호

적용후에 blog.펭구리96.com/wordpress 하면
wordpress 페이지로 이동함

db서버와 연동하는걸 cli가 아닌 웹기반으로 진행함

첨에 sql 정보 넣어서 connect잘 붙으면 설치하기 버튼클릭

이제 보이는 페이지는 워드프레스를 관리하기 위한 계정임

관리자계정이라 db계정과 달라도댐

사이트제목 - wptest
사용자명 - wpuser
pw- wppass
email - test@test.com

워드프레스가 블로근가??

관리자페이지의 모양-테마 눌르면 테마가 나오는데 새로운 테마 추가 버튼으로 테마 추가가능

아스트라 테마를 사용해서 블로그 테마를 업뎃함

---

교재 84p
aws 고가용성 및 내결함성

클라우드 사용이유는 고가용성과 내결함성이 크다

트래픽이 서버에 몰려서 서버 중단을 방지하기 위한것이 고가용성

서버1대 운영보단2대, 2대보단 3대

85p
https 를 사용하기 위해서는 인증서가 필요한데
aws 클라우드 서비스를 사용할 땐 무료로 제공해주는 기능이 있다.
그게 aws certificate manager

근데 무료로 주긴하는데 쓰려면 aws elb, cloudfront, api gateway 등을 사용할때만 활용가능하다.

certificate manager 사용시
원본 도메인만 넣으면 원본만 보호함
그래서 주로 와일드카드를 사용해서 인증서를 발급함

우린 도메인 수정권한이 있으니 dns 검증방법을 통하여 검증받는다.

키 알고리즘은 자기가 하고싶은거 2048 씀

그러면 이제 검증 대기중인데

route53에서 레코드 생성 버튼을 누르면 자동적으로 route53에 CNAME 유형의 레코드가 하나 추가됨
(수동으로해도 이상없음)


===============================================

## ELB

- CLB : Classic EKS > L4/L7
- NLB: Network > OSI 7계층 중 4계층 프로토콜 기반 > L4
- ALB: Application > OSI 7계층 중 7계층 프로토콜 기반 / 웹개발에서 주로 사용> L4/L7
- GWLB: Gateway 로드밸런서 > FWLB

로드밸런서를 사용하면 애플리케이션의 가용성(HA -> High Avaiability)와 내결함성(FT -> Fault Tolerant)이 높아짐

(EC2 콘솔 - 로드밸런서)

* 클래식 로드밸런서 생성
1. 클래식 로드밸런서
2. 기본구성
- 이름 작성
- 체계 > 사용자가 어디서 접속하는지 선택(인터넷 vs 내부(VPC))
3. 네트워크 매핑 
- VPC (ec2인스턴스의 VPC 선택)
- Availability Zones and subnets (a, c)선택
4. 보안그룹
- my-sg-web선택
5. 리스너 및 라우팅
- 리스너 추가해서 https 추가
6. 보안 리스너 설정
- 인증서 선택(아까 만들었던 인증서)
7. 상태검사
- 헬시체크
- 고급 상태 검사
8. 인스턴스
- 백엔드에다가 넣을 인스턴스 선택해서 넣기

* NLB 생성
1. NLB 선택
2. 기본구성
- 이름 작성
- 체계 - 인터넷 경계
- IPv4
3. 네트워크 매핑
- VPC (ec2인스턴스의 VPC 선택)
- Availability Zones and subnets (a, c)선택
4. 보안그룹
- my-sg-web선택
5. 리스너 및 라우팅
- NLB는 4계층(TCP, UDP)이기때문에 http/https가 없음
- 대상그룹 선택
  - 대상그룹 생성
    - 대상 유형 - 인스턴스
    - 대상 그룹 이름
    - 프로토콜 TCP선택 - 포트 80
    - 상태검사
      - 프로토콜 http 
      - 상태검사 경로 /
    - 고급상태검사
    - 대상 선택 후 추가
    - 포트는 내가 사용중인 포트 입력하면 
    - 대상 그룹 생성
- TCP, TLS 리스너 생성
6. 보안 리스너 선택
- 인증서 선택
7. 생성

* ALB
1. Application Load Balancer 선택
2. 기본구성
- 이름 작성
- 체계 - 인터넷 경계
- IPv4
3. 네트워크 매핑
- VPC (ec2인스턴스의 VPC 선택)
- Availability Zones and subnets (a, c)선택
4. 보안그룹
- my-sg-web선택
5. 리스너 및 라우팅
- https 선택
- 대상그룹 선택
  - 대상그룹 생성
    - 대상 유형 - 인스턴스
    - 대상 그룹 이름
    - 프로토콜 TCP선택 - 포트 80
    - 상태검사
      - 프로토콜 http 
      - 상태검사 경로 /
    - 고급상태검사
    - 대상 선택
    - 포트 80입력 후 아래에 보류 중인 것으로 포함 버튼 클릭
    - 대상 그룹 생성
- https만 생성
6. 보안 리스너 선택
- 인증서 선택
7. 서비스 통합을 통한 최적화 > 선택
- waf: 트래픽을 모니터링 및 필터링하고, 웹 애플리케이션으로 들어오는 악성 트래픽 또는 앱에서 나가는 무단 데이터를 차단해 일반적인 공격으로부터 웹 애플리케이션을 보호하는 보안 솔루션
> 지금은 아무것도 선택 X
8. 생성

* 부하분산 알고리즘
- Round Robin(순차적 접속) > 클래식 로드밸런서 기본 / 현업에서 잘 사용 안함
- Hash (해시 알고리즘) > 네트워크 로드밸런서 기본
- Least Connection(최소 연결 분산)

* 로드밸런서와 route53연결
1. 레코드 생성
- 이름 작성
- 별칭
  - Applicationn/Class Load Balancer에 대한 별칭 / Network Load Balancer에 대한 별칭
  - 리전선택
  - 로드밸런서 엔드포인트 연결

* 부하분산 알고리즘 변경
- EC2콘솔에서 대상그룹
- 대상 그룹 선택후 속성 선택
- 트래픽 구성에 알고리즘 정보 출력됨 > 편집 누르면 수정 가능
- 최소 미해결 요청 > 제일 적게 접속된 서버에 연결해줌
- 수정

## Auto Scaling Group (ASG)
